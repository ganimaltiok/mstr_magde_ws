Strategy REST
 2024 
OAS 3.0
MicroStrategy platform capabilities exposed in a RESTful web service.

When a user is authenticated, an authorization token and a session cookie are returned and must be provided in every subsequent request. Browsers automatically handle cookies, but if you are using your own client, you need to maintain the cookie and include it in further requests, together with the authorization token.

Live Demo

REST API Playground

REST API documentation

Dashboards(Dossiers) and Documents
Methods to; view definition, execute, and extract data from dashboards(dossiers) and documents



GET
/api/documents
Get documents in a list format


GET
/api/documents/{id}/cubes
Get the cubes used by a document


GET
/api/documents/{id}/definition
Get the hierarchy of a document


POST
/api/documents/{id}/instances
Create an instance of a document


DELETE
/api/documents/{id}/instances/{instanceId}
Delete an instance of a document


POST
/api/documents/{id}/instances/{instanceId}/excel
Export a document to Excel


POST
/api/documents/{id}/instances/{instanceId}/mstr
Export a document to .mstr file


POST
/api/documents/{id}/instances/{instanceId}/pdf
Export a document to PDF


GET
/api/documents/{id}/instances/{instanceId}/pdf/results/{resultId}
Get PDF export result


DELETE
/api/documents/{id}/instances/{instanceId}/pdf/results/{resultId}
Delete a PDF export result of a document


GET
/api/documents/{id}/instances/{instanceId}/prompts
Get collection of prompts on a document/dashboard(dossier) instance


GET
/api/documents/{id}/instances/{instanceId}/prompts/{promptIdentifier}/elements
Get available attribute element for document/dashboard(dossier)'s attribute element prompt


GET
/api/documents/{id}/instances/{instanceId}/prompts/{promptIdentifier}/objects
Get available object for answering all kinds of prompts


PUT
/api/documents/{id}/instances/{instanceId}/prompts/answers
Answer specified prompts on the document/dashboard(dossier) instance


GET
/api/documents/{id}/instances/{instanceId}/queryDetails
Get query details of all grid/graph on a document/dashboard(dossier) instance.


PUT
/api/documents/{id}/instances/{instanceId}/refresh
Refresh a document instance


POST
/api/documents/{id}/instances/{instanceId}/rePrompt
Set a document instance back to prompt status


POST
/api/documents/{id}/instances/{instanceId}/save
Save a document as an existing object


POST
/api/documents/{id}/instances/{instanceId}/saveAs
Save a document as a new object


GET
/api/documents/{id}/instances/{instanceId}/shortcut
Retrieve a published shortcut for a document


GET
/api/documents/{id}/instances/{instanceId}/status
Get the status of a document or dashboard(dossier) instance


POST
/api/documents/{id}/instances/{instanceId}/visualizations/{nodeKey}/csv
Export a single visualization to CSV


POST
/api/documents/{id}/instances/{instanceId}/visualizations/{nodeKey}/pdf
Export a single visualization to PDF


GET
/api/documents/{id}/prompts
Get collection of prompts on a document/dashboard(dossier)


GET
/api/dossiers
Get dashboards(dossiers) in a list format


GET
/api/dossiers/{dossierId}/definition
Get the hierarchy of a dashboard(dossier)

Get the hierarchy of a specific dashboard(dossier) in a specific project. A dashboard(dossier) and a document have the same base object; a dashboard(dossier) is simply a different view of the document. This request returns the tree structure of the dashboard(dossier) â€“ root, chapters, pages/chapter-level selectors, and visualizations. You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dashboard(dossier) by specifying the dashboard(dossier) ID in the path of the request; you are using the document/dashboard(dossier) ID that was generated by another API.

Parameters
Try it out
Name	Description
X-MSTR-AuthToken *
string
(header)
Authorization token.

X-MSTR-ProjectID *
string
(header)
Project ID

dossierId *
string
(path)
Dashboard(Dossier) ID

fields
string
(query)
Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, "id,elements" keeps only the "id" field and whole "elements" array field, omitting all other fields in the top-level response model.

Responses
Code	Description	Links
200	
OK
Media type

Controls Accept header.
Example Value
Schema
{
  "id": "string",
  "name": "string",
  "datasets": [
    {
      "name": "string",
      "id": "string",
      "availableObjects": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "rows": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "columns": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "pageBy": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "sqlStatement": "string"
    }
  ],
  "currentChapter": "string",
  "chapters": [
    {
      "filtersPanelStack": {
        "key": "string"
      },
      "n": "string",
      "k": "string",
      "pages": [
        {
          "visualizations": [
            {
              "name": "string",
              "key": "string",
              "units": {
                "attributes": [
                  {
                    "id": "string",
                    "type": 0,
                    "name": "string",
                    "alias": "string"
                  }
                ],
                "metrics": [
                  {
                    "id": "string",
                    "type": 0,
                    "name": "string",
                    "alias": "string"
                  }
                ]
              }
            }
          ],
          "n": "string",
          "k": "string",
          "t": 0,
          "oid": "string",
          "mid": "string",
          "oids": [
            "string"
          ]
        }
      ]
    }
  ]
}
No links
400	
Bad Request
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
401	
Unauthorized
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
500	
Internal Server Error
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links

POST
/api/dossiers/{dossierId}/instances
Create an instance of a dashboard(dossier)


GET
/api/dossiers/{dossierId}/instances/{dossierInstanceId}/elements
Get target attribute elements on dashboard(dossier) based on datasets and filters

Get target attribute elements on dashboard(dossier) based on datasets and filters

Parameters
Try it out
Name	Description
X-MSTR-AuthToken *
string
(header)
Authorization token.

X-MSTR-ProjectID *
string
(header)
Project ID

dossierId *
string
(path)
Dashboard(Dossier) ID

dossierInstanceId *
string
(path)
Dashboard(Dossier) instance ID

offset
integer($int64)
(query)
Starting point within the collection of returned results. Used to control paging behavior.
Default value : 0

limit
integer($int64)
(query)
Maximum number of items returned for a single request. Used to control paging behavior. Maximum value: 50000
Default value : 50

targetObjectId *
string
(query)
The target object ID to retrieve elements from

targetObjectType *
string
(query)
The target object type of target object (attribute, consolidation)

searchPattern
string
(query)
The pattern string used to search the elements of the dashboard(dossier)

searchForms
array<string>
(query)
The forms of target object to filter the elements in the result
filterKey
string
(query)
The key of filter in which the target object is

fields
string
(query)
Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, "id,elements" keeps only the "id" field and whole "elements" array field, omitting all other fields in the top-level response model.

Responses
Code	Description	Links
200	
OK
Media type

Controls Accept header.
Example Value
Schema
"string"
No links
400	
Bad Request
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
500	
Internal Server Error
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links

GET
/api/dossiers/{dossierId}/instances/{instanceId}/chapters/{chapterKey}/visualizations/{visualizationKey}
Get the definition and data result of a grid/graph visualization

Get the definition and data result of a grid/graph visualization in a specific dashboard(dossier) in a specific project. A dashboard(dossier) and a document have the same base object; a dashboard(dossier) is simply a different view of the document. You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dashboard(dossier), the dashboard(dossier) instance, the dashboard(dossier) chapter, and the dashboard(dossier) visualization in the path of the request, by specifying the IDs of the dashboard(dossier) and dashboard(dossier) instance and the keys of the chapter and visualization. You are using the document/dashboard(dossier) ID that was generated by another API. You obtain the dashboard(dossier) instance ID using POST /dossiers/{dossierId}/instances. You obtain the dashboard(dossier) chapter key and the dashboard(dossier) visualization key using GET /dossiers/{dossierId}/definition. It is important to note that concurrent behavior on one dashboard(dossier) instance ID is not currently supported; instead, you can create multi-instance IDs to perform concurrent behavior.

Parameters
Try it out
Name	Description
X-MSTR-AuthToken *
string
(header)
Authorization token.

X-MSTR-ProjectID *
string
(header)
Project ID

dossierId *
string
(path)
Dashboard(Dossier) ID

instanceId *
string
(path)
Dashboard(Dossier) instance ID

chapterKey *
string
(path)
Chapter key

visualizationKey *
string
(path)
Visualization key

offset
integer($int32)
(query)
Starting point within the collection of returned results. Used to control paging behavior.
Default value : 0

limit
integer($int32)
(query)
Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.
Default value : 1000

fields
string
(query)
Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, "id,elements" keeps only the "id" field and whole "elements" array field, omitting all other fields in the top-level response model.

Responses
Code	Description	Links
200	
OK
Media type

Controls Accept header.
Example Value
Schema
{
  "key": "string",
  "name": "string",
  "result": {}
}
No links
400	
Bad Request
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
401	
Unauthorized
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
500	
Internal Server Error
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links

PATCH
/api/dossiers/{dossierId}/instances/{instanceId}/datasets
Change the datasets on a dashboard(dossier) instance


PUT
/api/dossiers/{dossierId}/instances/{instanceId}/filters
Apply and execute the filters on a dashboard(dossier) instance

Execute a specific dashboard(dossier) instance with an updated filter definition. It updates the instance of the dashboard(dossier) with the new filter definition applied. You need auth token from POST /auth/login, project Id from GET /projects, dashboard(dossier) instance ID generated by POST /dossiers/{dossierId}/instances and filter applied criteria in the request body.

Parameters
Try it out
Name	Description
X-MSTR-AuthToken *
string
(header)
Authorization token.

X-MSTR-ProjectID *
string
(header)
Project ID

dossierId *
string
(path)
The ID of the dashboard(dossier)

instanceId *
string
(path)
The ID of the instance

ignoreMissingFilter
boolean
(query)
The ignoreMissingFilter controls the selector matches no found behavior, if true and no selector matches are found, then this filter input will NOT be applied and will be ignored, if false and no found, then the request will fail.
Default value : false

targetChapterKey
string
(query)
The target chapter key to switch to.

Request body

Request body

Example Value
Schema
[
  {
    "key": "string",
    "name": "string",
    "selections": [
      {
        "id": "string",
        "name": "string"
      }
    ],
    "constants": [
      "1500",
      "20000"
    ],
    "qualifier": "string",
    "formId": "string",
    "currentSelection": {
      "selectionStatus": "excluded"
    },
    "visualizationKey": "string"
  }
]
Responses
Code	Description	Links
204	
No Content
No links
400	
Bad Request
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
401	
Unauthorized
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
500	
Internal Server Error
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links

GET
/api/dossiers/{dossierId}/instances/{instanceId}/queryDetails
Get the query details of grid/graph visualizations in the dashboard(dossier).


GET
/api/dossiers/{id}/instances/{instanceId}/datasets/sqlView
Get the SQL view of datasets on a document/dashboard(dossier) instance


POST
/api/dossiers/draft/instances
Create a dashboard(dossier) in memory based on existing datasets


POST
/api/dossiers/instances
Create a dashboard(dossier) in memory based on a list of objects


GET
/api/v2/dossiers/{dossierId}/definition
Get the hierarchy of a dashboard(dossier)

Get the hierarchy of a specific dashboard(dossier) including with crossTab in visualization in a specific project. A dashboard(dossier) and a document have the same base object; a dashboard(dossier) is simply a different view of the document. This request returns the tree structure of the dashboard(dossier) - root, chapters, current chapter, pages, in-canvas/chapter-level selectors,visualization as filter, dataset infos and visualizations. You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dashboard(dossier) by specifying the dashboard(dossier) ID in the path of the request; you are using the document/dashboard(dossier) ID that was generated by another API.

Parameters
Try it out
Name	Description
X-MSTR-AuthToken *
string
(header)
Authorization token.

X-MSTR-ProjectID *
string
(header)
Project ID

dossierId *
string
(path)
Dashboard(Dossier) ID

fields
string
(query)
Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, "id,elements" keeps only the "id" field and whole "elements" array field, omitting all other fields in the top-level response model.

Responses
Code	Description	Links
200	
OK
Media type

Controls Accept header.
Example Value
Schema
{
  "id": "string",
  "name": "string",
  "datasets": [
    {
      "name": "string",
      "id": "string",
      "availableObjects": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "rows": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "columns": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "pageBy": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "sqlStatement": "string"
    }
  ],
  "currentChapter": "string",
  "chapters": [
    {
      "filtersPanelStack": {
        "key": "string"
      },
      "n": "string",
      "k": "string",
      "pages": [
        {
          "visualizations": [
            {
              "name": "string",
              "key": "string",
              "units": {
                "attributes": [
                  {
                    "id": "string",
                    "type": 0,
                    "name": "string",
                    "alias": "string"
                  }
                ],
                "metrics": [
                  {
                    "id": "string",
                    "type": 0,
                    "name": "string",
                    "alias": "string"
                  }
                ]
              }
            }
          ],
          "n": "string",
          "k": "string",
          "t": 0,
          "oid": "string",
          "mid": "string",
          "oids": [
            "string"
          ]
        }
      ]
    }
  ]
}
No links
400	
Bad Request
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
401	
Unauthorized
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
500	
Internal Server Error
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links

GET
/api/v2/dossiers/{dossierId}/instances/{instanceId}/chapters/{chapterKey}/visualizations/{visualizationKey}
Get the definition and data result of a grid/graph visualization

Get the definition and data result of a grid/graph visualization in a specific dashboard(dossier) in a specific project. A dashboard(dossier) and a document have the same base object; a dashboard(dossier) is simply a different view of the document. You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dashboard(dossier), the dashboard(dossier) instance, the dashboard(dossier) chapter, and the dashboard(dossier) visualization in the path of the request, by specifying the IDs of the dashboard(dossier) and dashboard(dossier) instance and the keys of the chapter and visualization. You are using the document/dashboard(dossier) ID that was generated by another API. You obtain the dashboard(dossier) instance ID using POST /dossiers/{dossierId}/instances. You obtain the dashboard(dossier) chapter key and the dashboard(dossier) visualization key using GET /dossiers/{dossierId}/definition. It is important to note that concurrent behavior on one dashboard(dossier) instance ID is not currently supported; instead, you can create multi-instance IDs to perform concurrent behavior.

Parameters
Try it out
Name	Description
X-MSTR-AuthToken *
string
(header)
Authorization token.

X-MSTR-ProjectID *
string
(header)
Project ID

dossierId *
string
(path)
Dashboard(Dossier) ID

instanceId *
string
(path)
Dashboard(Dossier) instance ID

chapterKey *
string
(path)
Chapter key

visualizationKey *
string
(path)
Visualization key

offset
integer($int32)
(query)
Starting point within the collection of returned results. Used to control paging behavior.
Default value : 0

limit
integer($int32)
(query)
Maximum number of items returned for a single request. Used to control paging behavior. Use -1 for no limit.
Default value : 1000

columnOffset
integer($int32)
(query)
Starting point within the collection of returned results. Used to control paging behavior at column direction.
Default value : -1

columnLimit
integer($int32)
(query)
Maximum number of items returned for a single request. Used to control paging behavior at column direction. Use -1 for no limit.
Default value : -1

standardDateFormat
boolean
(query)
Standard date format in ISO8601

standardRawDateFormat
boolean
(query)
Standard raw date format in ISO8601

fields
string
(query)
Field selector. This allows client to exclude unneeded information from response model. It can be either empty, or a combination of following exclusion rules separated by comma: '-data.metricValues.raw' / '-data.metricValues.formatted' / '-data.metricValues.extras' for a normal grid visualization, and '-data.metricValues.columnSets.raw' / '-data.metricValues.columnSets.formatted' / '-data.metricValues.columnSets.extras' for a compound grid visualization.

Responses
Code	Description	Links
400	
Bad Request
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
401	
Unauthorized
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
500	
Internal Server Error
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links

GET
/api/v2/dossiers/{dossierId}/instances/{instanceId}/definition
Get the hierarchy of a dashboard(dossier) from the instance

Get the hierarchy of a specific dashboard(dossier) in a specific project from instance. This API is specifically work to get dashboard(dossier) definition for the prompts which has no default answers.This request returns the tree structure of the dashboard(dossier) - root chapters, current chapter, pages, in-canvas/chapter-level selectors,visualization as filter, dataset infos and visualizations, You obtain the authorization token needed to execute the request using POST /auth/login and the project ID using GET /project; you pass the authorization token and the project ID in the request header. You identify the dashboard(dossier) by specifying the dashboard(dossier) ID in the path of the request; you can get the dashboard(dossier) instance id through API POST /dossiers/{id}/instances.

Parameters
Try it out
Name	Description
X-MSTR-AuthToken *
string
(header)
Authorization token.

X-MSTR-ProjectID *
string
(header)
Project ID

dossierId *
string
(path)
Dashboard(Dossier) ID

instanceId *
string
(path)
Dashboard(Dossier) instance ID

fields
string
(query)
Comma-separated, top-level field whitelist that allows the client to selectively retrieve part of the response model. If specified, extra filtering is applied, and for top-level object (if root model is an array, each array element), only the listed fields are kept in the response. For example, "id,elements" keeps only the "id" field and whole "elements" array field, omitting all other fields in the top-level response model.

Responses
Code	Description	Links
200	
OK
Media type

Controls Accept header.
Example Value
Schema
{
  "id": "string",
  "name": "string",
  "datasets": [
    {
      "name": "string",
      "id": "string",
      "availableObjects": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "rows": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "columns": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "pageBy": [
        {
          "id": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "sqlStatement": "string"
    }
  ],
  "currentChapter": "string",
  "chapters": [
    {
      "filtersPanelStack": {
        "key": "string"
      },
      "n": "string",
      "k": "string",
      "pages": [
        {
          "visualizations": [
            {
              "name": "string",
              "key": "string",
              "units": {
                "attributes": [
                  {
                    "id": "string",
                    "type": 0,
                    "name": "string",
                    "alias": "string"
                  }
                ],
                "metrics": [
                  {
                    "id": "string",
                    "type": 0,
                    "name": "string",
                    "alias": "string"
                  }
                ]
              }
            }
          ],
          "n": "string",
          "k": "string",
          "t": 0,
          "oid": "string",
          "mid": "string",
          "oids": [
            "string"
          ]
        }
      ]
    }
  ]
}
No links
400	
Bad Request
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
401	
Unauthorized
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links
500	
Internal Server Error
Media type

Example Value
Schema
{
  "code": "string",
  "iServerCode": 0,
  "message": "string",
  "ticketId": "string",
  "subErrors": [
    {
      "iServerCode": 0,
      "message": "string",
      "additionalProperties": {
        "objectId": "string",
        "objectName": "string",
        "dbRoles": [
          {
            "isOAuthDB": true,
            "name": "string",
            "type": "string",
            "id": "string"
          }
        ]
      }
    }
  ],
  "additionalProperties": {}
}
No links

POST
/api/v2/dossiers/{dossierId}/instances/{instanceId}/themes/{themeId}
Apply theme to a dashboard(dossier) instance.